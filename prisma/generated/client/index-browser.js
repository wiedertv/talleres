
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  ownerId: 'ownerId',
  subscriptionId: 'subscriptionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  avatar: 'avatar',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  planId: 'planId',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentHistoryScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  paidAt: 'paidAt',
  nextRenewalAt: 'nextRenewalAt',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  duration: 'duration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  email: 'email',
  phone: 'phone',
  address: 'address',
  ci: 'ci',
  rif: 'rif',
  notes: 'notes',
  points: 'points',
  level: 'level',
  avatar: 'avatar',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  plate: 'plate',
  vin: 'vin',
  make: 'make',
  model: 'model',
  year: 'year',
  color: 'color',
  mileage: 'mileage',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.VehicleClientScalarFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  clientId: 'clientId',
  broughtAt: 'broughtAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  type: 'type',
  description: 'description',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  total: 'total',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  vehicleId: 'vehicleId',
  assignedToId: 'assignedToId',
  vehicleClientId: 'vehicleClientId',
  clientId: 'clientId',
  organizationId: 'organizationId'
};

exports.Prisma.ServiceItemScalarFieldEnum = {
  id: 'id',
  description: 'description',
  price: 'price',
  serviceId: 'serviceId'
};

exports.Prisma.PartScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  price: 'price',
  stock: 'stock',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.PartsSaleScalarFieldEnum = {
  id: 'id',
  total: 'total',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  vehicleId: 'vehicleId',
  sellerId: 'sellerId',
  clientId: 'clientId'
};

exports.Prisma.PartUsageScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  serviceId: 'serviceId',
  partId: 'partId'
};

exports.Prisma.SaleItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  price: 'price',
  partsSaleId: 'partsSaleId',
  partId: 'partId'
};

exports.Prisma.LoyaltyBenefitScalarFieldEnum = {
  id: 'id',
  level: 'level',
  name: 'name',
  description: 'description',
  discount: 'discount'
};

exports.Prisma.InventoryMovementScalarFieldEnum = {
  id: 'id',
  partId: 'partId',
  type: 'type',
  quantity: 'quantity',
  beforeStock: 'beforeStock',
  afterStock: 'afterStock',
  reason: 'reason',
  createdAt: 'createdAt',
  organizationId: 'organizationId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  MECHANIC: 'MECHANIC',
  RECEPTIONIST: 'RECEPTIONIST'
};

exports.ClientType = exports.$Enums.ClientType = {
  PERSONAL: 'PERSONAL',
  BUSINESS: 'BUSINESS'
};

exports.LoyaltyLevel = exports.$Enums.LoyaltyLevel = {
  BRONZE: 'BRONZE',
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM'
};

exports.ServiceType = exports.$Enums.ServiceType = {
  WITH_VEHICLE: 'WITH_VEHICLE',
  WITHOUT_VEHICLE: 'WITHOUT_VEHICLE'
};

exports.ServiceStatus = exports.$Enums.ServiceStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.PartCategory = exports.$Enums.PartCategory = {
  ENGINE: 'ENGINE',
  ELECTRICAL: 'ELECTRICAL',
  BRAKES: 'BRAKES',
  SUSPENSION: 'SUSPENSION',
  TRANSMISSION: 'TRANSMISSION',
  FILTERS: 'FILTERS',
  FLUIDS: 'FLUIDS',
  TIRES: 'TIRES',
  ACCESSORIES: 'ACCESSORIES'
};

exports.MovementType = exports.$Enums.MovementType = {
  ENTRY: 'ENTRY',
  EXIT: 'EXIT',
  ADJUSTMENT: 'ADJUSTMENT',
  TRANSFER: 'TRANSFER'
};

exports.Prisma.ModelName = {
  Organization: 'Organization',
  User: 'User',
  Subscription: 'Subscription',
  PaymentHistory: 'PaymentHistory',
  SubscriptionPlan: 'SubscriptionPlan',
  Client: 'Client',
  Vehicle: 'Vehicle',
  VehicleClient: 'VehicleClient',
  Service: 'Service',
  ServiceItem: 'ServiceItem',
  Part: 'Part',
  PartsSale: 'PartsSale',
  PartUsage: 'PartUsage',
  SaleItem: 'SaleItem',
  LoyaltyBenefit: 'LoyaltyBenefit',
  InventoryMovement: 'InventoryMovement'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
